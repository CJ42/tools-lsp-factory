/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import { TypedEventFilter, TypedEvent, TypedListener } from './commons';

interface LSP8Interface extends ethers.utils.Interface {
  functions: {
    'authorizeOperator(address,bytes32)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'getData(bytes32[])': FunctionFragment;
    'getOperatorsOf(bytes32)': FunctionFragment;
    'isOperatorFor(address,bytes32)': FunctionFragment;
    'owner()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'revokeOperator(address,bytes32)': FunctionFragment;
    'setData(bytes32[],bytes[])': FunctionFragment;
    'supportsInterface(bytes4)': FunctionFragment;
    'tokenIdsOf(address)': FunctionFragment;
    'tokenOwnerOf(bytes32)': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,address,bytes32,bool,bytes)': FunctionFragment;
    'transferBatch(address[],address[],bytes32[],bool,bytes[])': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'authorizeOperator', values: [string, BytesLike]): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string;
  encodeFunctionData(functionFragment: 'getData', values: [BytesLike[]]): string;
  encodeFunctionData(functionFragment: 'getOperatorsOf', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'isOperatorFor', values: [string, BytesLike]): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'revokeOperator', values: [string, BytesLike]): string;
  encodeFunctionData(functionFragment: 'setData', values: [BytesLike[], BytesLike[]]): string;
  encodeFunctionData(functionFragment: 'supportsInterface', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'tokenIdsOf', values: [string]): string;
  encodeFunctionData(functionFragment: 'tokenOwnerOf', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [string, string, BytesLike, boolean, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'transferBatch',
    values: [string[], string[], BytesLike[], boolean, BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string;

  decodeFunctionResult(functionFragment: 'authorizeOperator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getOperatorsOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isOperatorFor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revokeOperator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenIdsOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenOwnerOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferBatch', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;

  events: {
    'AuthorizedOperator(address,address,bytes32)': EventFragment;
    'DataChanged(bytes32,bytes)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'RevokedOperator(address,address,bytes32)': EventFragment;
    'Transfer(address,address,address,bytes32,bool,bytes)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AuthorizedOperator'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DataChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RevokedOperator'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
}

export class LSP8 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LSP8Interface;

  functions: {
    authorizeOperator(
      operator: string,
      tokenId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(tokenOwner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getData(
      _keys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[string[]] & { values: string[] }>;

    getOperatorsOf(tokenId: BytesLike, overrides?: CallOverrides): Promise<[string[]]>;

    isOperatorFor(
      operator: string,
      tokenId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeOperator(
      operator: string,
      tokenId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setData(
      _keys: BytesLike[],
      _values: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    tokenIdsOf(tokenOwner: string, overrides?: CallOverrides): Promise<[string[]]>;

    tokenOwnerOf(tokenId: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      from: string,
      to: string,
      tokenId: BytesLike,
      force: boolean,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferBatch(
      from: string[],
      to: string[],
      tokenId: BytesLike[],
      force: boolean,
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  authorizeOperator(
    operator: string,
    tokenId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(tokenOwner: string, overrides?: CallOverrides): Promise<BigNumber>;

  getData(_keys: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

  getOperatorsOf(tokenId: BytesLike, overrides?: CallOverrides): Promise<string[]>;

  isOperatorFor(operator: string, tokenId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeOperator(
    operator: string,
    tokenId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setData(
    _keys: BytesLike[],
    _values: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  tokenIdsOf(tokenOwner: string, overrides?: CallOverrides): Promise<string[]>;

  tokenOwnerOf(tokenId: BytesLike, overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    from: string,
    to: string,
    tokenId: BytesLike,
    force: boolean,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferBatch(
    from: string[],
    to: string[],
    tokenId: BytesLike[],
    force: boolean,
    data: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    authorizeOperator(
      operator: string,
      tokenId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(tokenOwner: string, overrides?: CallOverrides): Promise<BigNumber>;

    getData(_keys: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    getOperatorsOf(tokenId: BytesLike, overrides?: CallOverrides): Promise<string[]>;

    isOperatorFor(
      operator: string,
      tokenId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    revokeOperator(operator: string, tokenId: BytesLike, overrides?: CallOverrides): Promise<void>;

    setData(_keys: BytesLike[], _values: BytesLike[], overrides?: CallOverrides): Promise<void>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    tokenIdsOf(tokenOwner: string, overrides?: CallOverrides): Promise<string[]>;

    tokenOwnerOf(tokenId: BytesLike, overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      from: string,
      to: string,
      tokenId: BytesLike,
      force: boolean,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    transferBatch(
      from: string[],
      to: string[],
      tokenId: BytesLike[],
      force: boolean,
      data: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    AuthorizedOperator(
      operator?: string | null,
      tokenOwner?: string | null,
      tokenId?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { operator: string; tokenOwner: string; tokenId: string }
    >;

    DataChanged(
      key?: BytesLike | null,
      value?: null
    ): TypedEventFilter<[string, string], { key: string; value: string }>;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<[string, string], { previousOwner: string; newOwner: string }>;

    RevokedOperator(
      operator?: string | null,
      tokenOwner?: string | null,
      tokenId?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { operator: string; tokenOwner: string; tokenId: string }
    >;

    Transfer(
      operator?: null,
      from?: string | null,
      to?: string | null,
      tokenId?: BytesLike | null,
      force?: null,
      data?: null
    ): TypedEventFilter<
      [string, string, string, string, boolean, string],
      {
        operator: string;
        from: string;
        to: string;
        tokenId: string;
        force: boolean;
        data: string;
      }
    >;
  };

  estimateGas: {
    authorizeOperator(
      operator: string,
      tokenId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(tokenOwner: string, overrides?: CallOverrides): Promise<BigNumber>;

    getData(_keys: BytesLike[], overrides?: CallOverrides): Promise<BigNumber>;

    getOperatorsOf(tokenId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    isOperatorFor(
      operator: string,
      tokenId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeOperator(
      operator: string,
      tokenId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setData(
      _keys: BytesLike[],
      _values: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    tokenIdsOf(tokenOwner: string, overrides?: CallOverrides): Promise<BigNumber>;

    tokenOwnerOf(tokenId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      from: string,
      to: string,
      tokenId: BytesLike,
      force: boolean,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferBatch(
      from: string[],
      to: string[],
      tokenId: BytesLike[],
      force: boolean,
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    authorizeOperator(
      operator: string,
      tokenId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(tokenOwner: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getData(_keys: BytesLike[], overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOperatorsOf(tokenId: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOperatorFor(
      operator: string,
      tokenId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeOperator(
      operator: string,
      tokenId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setData(
      _keys: BytesLike[],
      _values: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenIdsOf(tokenOwner: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenOwnerOf(tokenId: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      from: string,
      to: string,
      tokenId: BytesLike,
      force: boolean,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferBatch(
      from: string[],
      to: string[],
      tokenId: BytesLike[],
      force: boolean,
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
