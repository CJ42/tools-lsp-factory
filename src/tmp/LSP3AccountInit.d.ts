/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface LSP3AccountInitInterface extends ethers.utils.Interface {
  functions: {
    "dataKeys(uint256)": FunctionFragment;
    "execute(uint256,address,uint256,bytes)": FunctionFragment;
    "getData(bytes32)": FunctionFragment;
    "isValidSignature(bytes32,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "dataCount()": FunctionFragment;
    "allDataKeys()": FunctionFragment;
    "setDataMultiple(bytes32[],bytes[])": FunctionFragment;
    "getDataMultiple(bytes32[])": FunctionFragment;
    "setData(bytes32,bytes)": FunctionFragment;
    "universalReceiver(bytes32,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "dataKeys",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [BigNumberish, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getData", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "isValidSignature",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(functionFragment: "dataCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allDataKeys",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDataMultiple",
    values: [BytesLike[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getDataMultiple",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setData",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "universalReceiver",
    values: [BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "dataKeys", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dataCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allDataKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDataMultiple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDataMultiple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "universalReceiver",
    data: BytesLike
  ): Result;

  events: {
    "ContractCreated(address)": EventFragment;
    "DataChanged(bytes32,bytes)": EventFragment;
    "Executed(uint256,address,uint256,bytes)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "UniversalReceiver(address,bytes32,bytes32,bytes)": EventFragment;
    "ValueReceived(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ContractCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DataChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Executed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UniversalReceiver"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValueReceived"): EventFragment;
}

export class LSP3AccountInit extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LSP3AccountInitInterface;

  functions: {
    dataKeys(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    /**
     * Executes any other smart contract. Is only callable by the owner.
     * @param _data the call data, or the contract data to deploy
     * @param _operation the operation to execute: CALL = 0; DELEGATECALL = 1; CREATE2 = 2; CREATE = 3;
     * @param _to the smart contract or address to interact with. `_to` will be unused if a contract is created (operation 2 and 3)
     * @param _value the value of ETH to transfer
     */
    execute(
      _operation: BigNumberish,
      _to: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Gets data at a given `key`
     * @param _key the key which value to retrieve
     */
    getData(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { _value: string }>;

    /**
     * Checks if an owner signed `_data`. ERC1271 interface.
     * @param _hash hash of the data signed//Arbitrary length data signed on the behalf of address(this)
     * @param _signature owner's signature(s) of the data
     */
    isValidSignature(
      _hash: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { magicValue: string }>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * See {IERC165-supportsInterface}.
     */
    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Sets the owner of the contract
     * @param _newOwner the owner of the contract.
     */
    initialize(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dataCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    allDataKeys(overrides?: CallOverrides): Promise<[string[]]>;

    setDataMultiple(
      _keys: BytesLike[],
      _values: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getDataMultiple(
      _keys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    /**
     * Sets data at a given `key`
     * @param _key the key which value to retrieve
     * @param _value the bytes to set.
     */
    setData(
      _key: BytesLike,
      _value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Notify the smart contract about any received asset LSP1 interface
     * @param _data The data received
     * @param _typeId The type of transfer received
     */
    universalReceiver(
      _typeId: BytesLike,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  dataKeys(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  /**
   * Executes any other smart contract. Is only callable by the owner.
   * @param _data the call data, or the contract data to deploy
   * @param _operation the operation to execute: CALL = 0; DELEGATECALL = 1; CREATE2 = 2; CREATE = 3;
   * @param _to the smart contract or address to interact with. `_to` will be unused if a contract is created (operation 2 and 3)
   * @param _value the value of ETH to transfer
   */
  execute(
    _operation: BigNumberish,
    _to: string,
    _value: BigNumberish,
    _data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Gets data at a given `key`
   * @param _key the key which value to retrieve
   */
  getData(_key: BytesLike, overrides?: CallOverrides): Promise<string>;

  /**
   * Checks if an owner signed `_data`. ERC1271 interface.
   * @param _hash hash of the data signed//Arbitrary length data signed on the behalf of address(this)
   * @param _signature owner's signature(s) of the data
   */
  isValidSignature(
    _hash: BytesLike,
    _signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * See {IERC165-supportsInterface}.
   */
  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Sets the owner of the contract
   * @param _newOwner the owner of the contract.
   */
  initialize(
    _newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dataCount(overrides?: CallOverrides): Promise<BigNumber>;

  allDataKeys(overrides?: CallOverrides): Promise<string[]>;

  setDataMultiple(
    _keys: BytesLike[],
    _values: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getDataMultiple(
    _keys: BytesLike[],
    overrides?: CallOverrides
  ): Promise<string[]>;

  /**
   * Sets data at a given `key`
   * @param _key the key which value to retrieve
   * @param _value the bytes to set.
   */
  setData(
    _key: BytesLike,
    _value: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Notify the smart contract about any received asset LSP1 interface
   * @param _data The data received
   * @param _typeId The type of transfer received
   */
  universalReceiver(
    _typeId: BytesLike,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    dataKeys(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    /**
     * Executes any other smart contract. Is only callable by the owner.
     * @param _data the call data, or the contract data to deploy
     * @param _operation the operation to execute: CALL = 0; DELEGATECALL = 1; CREATE2 = 2; CREATE = 3;
     * @param _to the smart contract or address to interact with. `_to` will be unused if a contract is created (operation 2 and 3)
     * @param _value the value of ETH to transfer
     */
    execute(
      _operation: BigNumberish,
      _to: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Gets data at a given `key`
     * @param _key the key which value to retrieve
     */
    getData(_key: BytesLike, overrides?: CallOverrides): Promise<string>;

    /**
     * Checks if an owner signed `_data`. ERC1271 interface.
     * @param _hash hash of the data signed//Arbitrary length data signed on the behalf of address(this)
     * @param _signature owner's signature(s) of the data
     */
    isValidSignature(
      _hash: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    /**
     * See {IERC165-supportsInterface}.
     */
    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Sets the owner of the contract
     * @param _newOwner the owner of the contract.
     */
    initialize(_newOwner: string, overrides?: CallOverrides): Promise<void>;

    dataCount(overrides?: CallOverrides): Promise<BigNumber>;

    allDataKeys(overrides?: CallOverrides): Promise<string[]>;

    setDataMultiple(
      _keys: BytesLike[],
      _values: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    getDataMultiple(
      _keys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    /**
     * Sets data at a given `key`
     * @param _key the key which value to retrieve
     * @param _value the bytes to set.
     */
    setData(
      _key: BytesLike,
      _value: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Notify the smart contract about any received asset LSP1 interface
     * @param _data The data received
     * @param _typeId The type of transfer received
     */
    universalReceiver(
      _typeId: BytesLike,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    ContractCreated(
      contractAddress?: string | null
    ): TypedEventFilter<[string], { contractAddress: string }>;

    DataChanged(
      key?: BytesLike | null,
      value?: null
    ): TypedEventFilter<[string, string], { key: string; value: string }>;

    Executed(
      _operation?: BigNumberish | null,
      _to?: string | null,
      _value?: BigNumberish | null,
      _data?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, string],
      { _operation: BigNumber; _to: string; _value: BigNumber; _data: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    UniversalReceiver(
      from?: string | null,
      typeId?: BytesLike | null,
      returnedValue?: BytesLike | null,
      receivedData?: null
    ): TypedEventFilter<
      [string, string, string, string],
      {
        from: string;
        typeId: string;
        returnedValue: string;
        receivedData: string;
      }
    >;

    ValueReceived(
      sender?: string | null,
      value?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { sender: string; value: BigNumber }
    >;
  };

  estimateGas: {
    dataKeys(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Executes any other smart contract. Is only callable by the owner.
     * @param _data the call data, or the contract data to deploy
     * @param _operation the operation to execute: CALL = 0; DELEGATECALL = 1; CREATE2 = 2; CREATE = 3;
     * @param _to the smart contract or address to interact with. `_to` will be unused if a contract is created (operation 2 and 3)
     * @param _value the value of ETH to transfer
     */
    execute(
      _operation: BigNumberish,
      _to: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Gets data at a given `key`
     * @param _key the key which value to retrieve
     */
    getData(_key: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Checks if an owner signed `_data`. ERC1271 interface.
     * @param _hash hash of the data signed//Arbitrary length data signed on the behalf of address(this)
     * @param _signature owner's signature(s) of the data
     */
    isValidSignature(
      _hash: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * See {IERC165-supportsInterface}.
     */
    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Sets the owner of the contract
     * @param _newOwner the owner of the contract.
     */
    initialize(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dataCount(overrides?: CallOverrides): Promise<BigNumber>;

    allDataKeys(overrides?: CallOverrides): Promise<BigNumber>;

    setDataMultiple(
      _keys: BytesLike[],
      _values: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getDataMultiple(
      _keys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Sets data at a given `key`
     * @param _key the key which value to retrieve
     * @param _value the bytes to set.
     */
    setData(
      _key: BytesLike,
      _value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Notify the smart contract about any received asset LSP1 interface
     * @param _data The data received
     * @param _typeId The type of transfer received
     */
    universalReceiver(
      _typeId: BytesLike,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    dataKeys(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Executes any other smart contract. Is only callable by the owner.
     * @param _data the call data, or the contract data to deploy
     * @param _operation the operation to execute: CALL = 0; DELEGATECALL = 1; CREATE2 = 2; CREATE = 3;
     * @param _to the smart contract or address to interact with. `_to` will be unused if a contract is created (operation 2 and 3)
     * @param _value the value of ETH to transfer
     */
    execute(
      _operation: BigNumberish,
      _to: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Gets data at a given `key`
     * @param _key the key which value to retrieve
     */
    getData(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Checks if an owner signed `_data`. ERC1271 interface.
     * @param _hash hash of the data signed//Arbitrary length data signed on the behalf of address(this)
     * @param _signature owner's signature(s) of the data
     */
    isValidSignature(
      _hash: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC165-supportsInterface}.
     */
    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Sets the owner of the contract
     * @param _newOwner the owner of the contract.
     */
    initialize(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dataCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allDataKeys(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setDataMultiple(
      _keys: BytesLike[],
      _values: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getDataMultiple(
      _keys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Sets data at a given `key`
     * @param _key the key which value to retrieve
     * @param _value the bytes to set.
     */
    setData(
      _key: BytesLike,
      _value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Notify the smart contract about any received asset LSP1 interface
     * @param _data The data received
     * @param _typeId The type of transfer received
     */
    universalReceiver(
      _typeId: BytesLike,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
